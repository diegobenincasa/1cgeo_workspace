package br.mil.eb.dsg.arctools;

import java.io.IOException;

import javax.swing.JOptionPane;

import com.esri.arcgis.addins.desktop.Extension;
import com.esri.arcgis.editor.Editor;
import com.esri.arcgis.editor.IEditEventsAdapter;
import com.esri.arcgis.editor.IEditEventsOnCreateFeatureEvent;
import com.esri.arcgis.framework.IApplication;
import com.esri.arcgis.geodatabase.IFeature;
import com.esri.arcgis.geometry.IPoint;
import com.esri.arcgis.interop.AutomationException;
import com.esri.arcgis.system.IExtension;
import com.esri.arcgis.system.IUID;
import com.esri.arcgis.system.UID;

public class AutoCotar extends Extension {

	private Editor m_editor;
	
	/**
	 * Initializes this application extension with the ArcMap application instance it is hosted in.
	 * 
	 * This method is automatically called by the host ArcMap application.
	 * It marks the start of the dockable window's lifecycle.
	 * Clients must not call this method.
	 * 
	 * @param app is a reference to ArcMap's IApplication interface
	 * @exception java.io.IOException if there are interop problems.
	 * @exception com.esri.arcgis.interop.AutomationException if the component throws an ArcObjects exception.
	 */
	@Override
	public void init(IApplication app) throws IOException, AutomationException {
		// TODO Auto-generated method stub
		IUID extensionID = new UID();
		extensionID.setValue("esriEditor.Editor");
		IExtension editExtension = app.findExtensionByCLSID(extensionID);
		m_editor = (Editor) editExtension;
		
		m_editor.addIEditEventsListener(new IEditEventsAdapter(){
			
			private static final long serialVersionUID = 1L;

			public void onCreateFeature(IEditEventsOnCreateFeatureEvent arg0) throws IOException, AutomationException {
				IFeature pointFeature = (IFeature) arg0.getObj();
				IPoint pointGeometry = (IPoint) pointFeature.getShape();
				int atribCota = pointFeature.getFields().findField("cota");
				pointFeature.setValue(atribCota, pointGeometry.getZ());
				pointFeature.store();
			}
		});
	}

}
